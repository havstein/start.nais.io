name: Build and deploy main

on:
   push:
      branches:
         - main
      paths-ignore:
         - "*.md"

jobs:
   build:
      name: Build all the things
      runs-on: ubuntu-18.04
      steps:
         -  uses: actions/checkout@v2
         -  uses: gradle/wrapper-validation-action@v1
         -  name: Cache Gradle artifacts
            uses: actions/cache@v2
            with:
               path: ~/.gradle/caches
               key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle.kts') }}
               restore-keys: |
                  ${{ runner.os }}-gradle-
         -  name: Cache Docker layers
            uses: actions/cache@v2
            with:
               path: /tmp/.buildx-cache
               key: ${{ runner.os }}-buildx-${{ github.sha }}
               restore-keys: |
                  ${{ runner.os }}-buildx-
         -  name: Generate Docker image tag with short sha
            id: dockertag
            run: echo "::set-output name=docker_img::ghcr.io/${{ github.repository }}:$(git rev-parse --short HEAD)"
         -  name: Generate SLSA provenance
            uses: slsa-framework/github-actions-demo@v0.1
            with:
               artifact_path: ./
         -  uses: actions/setup-java@v2
            with:
               java-version: '16'
               distribution: 'adopt'
         -  name: Build and test the app
            run: ./gradlew test build
         -  name: Login to GitHub Docker Registry
            uses: docker/login-action@v1
            with:
               registry: ghcr.io
               username: ${{ github.actor }}
               password: ${{ secrets.GITHUB_TOKEN }}
         -  name: Set up Docker Buildx
            uses: docker/setup-buildx-action@v1
         -  name: Build and push the Docker image
            uses: docker/build-push-action@v2
            with:
               context: .
               push: true
               tags: ${{ steps.dockertag.outputs.docker_img }}
               cache-from: type=registry,ref=${{ steps.dockertag.outputs.docker_img }}
               cache-to: type=inline

   deploy_to_dev:
      name: Deploy to dev-gcp
      needs: build
      runs-on: ubuntu-18.04
      steps:
         -  uses: actions/checkout@v2
         -  name: Generate Docker image tag
            id: dockertag
            run: echo "::set-output name=docker_img::ghcr.io/${{ github.repository }}:$(git rev-parse --short HEAD)"
         -  uses: nais/deploy/actions/deploy@v1
            env:
               APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
               CLUSTER: dev-gcp
               RESOURCE: .nais/nais.yaml
               VARS: .nais/dev.yaml
               IMAGE: ${{ steps.dockertag.outputs.docker_img }}

   deploy_to_prod:
      name: Deploy to prod-gcp
      needs: deploy_to_dev
      if: github.ref == 'refs/heads/main'
      runs-on: ubuntu-18.04
      steps:
         -  uses: actions/checkout@v2
         -  name: Generate Docker image tag
            id: dockertag
            run: echo "::set-output name=docker_img::ghcr.io/${{ github.repository }}:$(git rev-parse --short HEAD)"
         -  uses: nais/deploy/actions/deploy@v1
            env:
               APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
               CLUSTER: prod-gcp
               RESOURCE: .nais/nais.yaml
               VARS: .nais/prod.yaml
               IMAGE: ${{ steps.dockertag.outputs.docker_img }}
